<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="performance">
	
	<insert id="performanceRegister">
		insert into
			performance
		values (
			performance_seq.nextval,
			#{ memberId },
			#{ categoryCode },
			#{ locationCode },
			#{ perTitle },
			#{ perDirector },
			#{ perActor },
			#{ theaterNo },
			#{ perTime },
			#{ perContent },
			#{ perImgOriginalFileName },
			#{ perImgRenamedFileName },
			#{ detailImgOriginalFileName },
			#{ detailImgRenamedFileName },
			#{ perRating },
			default,
			default,
			default,
			#{ perStartDate },
			#{ perEndDate },
			default,
			#{ aloneSale },
			default,
			#{ reservationStartDate }
			
		)
	</insert>
	
	<select id="selectPerformanceList" resultMap="performanceMap">
		select
			*
		from
			performance
		
		<!-- where member_id = 'company2' -->
		where admin_approval = 'Y' 
		order by
			per_register_date
			desc
	</select>
	
	<select id="selectCategoryList" resultMap="performanceMap">
		select
			*
		from
			performance
		
		where category_code = #{ category } and admin_approval = 'Y'
		order by
			per_register_date desc
	</select>
	
	<select id="categoryListView" resultMap="perJoinMap">
		select 
		        *
		from(
		 	select
		        rownum as rnum,
				P.*
			from
				performance_join_view P
			where 
				category_code = #{ category } and admin_approval = 'Y'
		    )P
		where rnum between #{ start } and #{ end }
	</select>
	
	<select id="getCategoryName" resultType="string">
		select 
			category_name
		from
			category
		where
			category_code = #{ category }
	</select>
	
	<update id="approvePerRegister">
		update 
			performance
		set 
			admin_approval = 'Y'
		where 
			per_no = #{ perNo }
	</update>
	
	<select id="adminApprovalPerList" resultMap="performanceMap">
		select
			*
		from
			performance
		where
			admin_approval = 'N'
		<!-- order by
			no desc -->
	</select>
	
	<select id="companyPerList" resultMap="performanceMap">
		select
			*
		from
			performance
		where
			member_id = #{ memberId } <!-- and admin_approval = 'Y' -->
		<!-- order by
			no desc -->
	</select>
	
	<select id="selectOnePerformance" resultMap="perJoinMap">
		select
			*
		from
			performance
		where
			per_no = #{ perNo }
		<!-- order by
			no desc -->
	</select>	
	
	<select id="selectOnePerJoin" resultMap="perJoinMap">
		select
			*
		from
			performance_join_view
		where
			per_no = #{ perNo }
	</select>	
	
	<select id="searchHallName" resultMap="performanceHallMap">
		select
			*
		from
			theater
		where
			upper(theater_name) like '%'||upper(#{ keyword })||'%'
	</select>			
	
	<update id="perUpdate">
		update 
			performance
		set 
			category_code = #{ categoryCode },
			location_code = #{ locationCode },
			per_title = #{ perTitle },
			per_director = #{ perDirector },
			per_actor = #{ perActor },
			theater_no = #{ theaterNo },
			per_time = #{ perTime },
			per_content = #{ perContent },
			per_img_original_filename =#{perImgOriginalFileName},
			per_img_renamed_filename=#{perImgRenamedFileName},
			detail_img_original_filename=#{detailImgOriginalFileName},
			detail_img_renamed_filename=#{detailImgRenamedFileName},
			per_rating = #{ perRating },
			per_start_date = #{ perStartDate },
			per_end_date = #{ perEndDate },
			alone_sale = #{ aloneSale },
			price = #{ price },
			reservation_start_date = #{ reservationStartDate }
		where 
			per_no = #{ perNo }
	</update>	

	<insert id="wishListInsert">
		insert into
			wishlist
		values (
			#{ memberId },
			#{ perNo },
			default
			
		)
	</insert>
	
	<delete id="wishListDelete">
		delete from 
			wishlist
		where 
			member_id = #{ memberId } and per_no = #{ perNo }
	</delete>
	
	<select id="wishListView" resultMap="myWishListMap">
		select
			*
		from
			wishlist_view 
		where
			member_id = #{ memberId } 
		<!-- order by
			no desc -->
	</select>	

	<select id="getPerNo" resultType="_int">
		select 
			per_no
		from
			performance
		where
			per_title like #{ perTitle }
	</select>
	
	<insert id="insertSchedule">
		insert into
			schedule
		values(
			schedule_seq.nextval,
			#{ perNo },
			null,
			#{ parseDate },
			(select theater_no from performance where per_no = #{ perNo })
		)
	
	</insert>	
	
	<insert id="recentlyPerListInsert">
		insert into
			recently_per_list
		values (
			#{ memberId },
			#{ perNo },
			default
			
		)
	</insert>
	
	<select id="recentlyPerList" resultMap="MyRecentlyPerListMap">
		select
			*
		from
			recently_per_list_view
		where
			member_id = #{ memberId }
		order by
			recently_date desc 
	</select>
	
	<delete id="recentlyPerListDelete">
		delete from 
			recently_per_list
		where 
			member_id = #{ memberId } and per_no = #{ perNo }
	</delete>
	
	<select id="selectPerSchedule" resultMap="perSchedule">
		select
			*
		from
			schedule
		where
			per_no = #{ perNo }
		order by
			sch_date_time
	</select>
	
	<update id="addRecommendedPer">
		update 
			performance
		set 
			per_display = 'Y'
		where 
			per_no = #{ perNo }
	</update>
	
	<update id="turnOffRecommendedPer">
		update 
			performance
		set 
			per_display = 'N'
		where 
			per_no = #{ perNo }
	</update>
	
	<delete id="deleteDate">
		delete from schedule
			where sch_no = #{ schNo }
	</delete>
	
	<select id="searchPerformance" resultMap="perJoinMap">
		select 
			*
		from
			performance_join_view
		where
			upper(per_title) like '%'||upper(#{ keyword })||'%'
	</select>
	

	<select id="selectCategoryListTotalContents" resultType="_int">
	    select 
	    	count(*) 
	    from 
	    	performance	
	    where category_code = #{ category }
	</select>
	

	
	<select id="searchPerformanceList" resultMap="performanceMap">
		select 
			*
		from(
        	select
                rownum as rnum,
                P.*
        	from 
                (select
                       *
                from
                    performance
                <where>
                    <if test='searchType.equals("companyId")'>
                    upper(member_id) like '%'||upper(#{ keyword })||'%'
                    </if>
                    <if test='searchType.equals("perTitle")'>
                    upper(per_title) like '%'||upper(#{ keyword })||'%'
                    </if>
                </where>
                order by per_no
                )P
		)
		where rnum between #{ start } and #{ end } 
	</select>
	
	<select id="selectTotalPerformanceList" resultType="_int">
		select 
			count(*)
		from
			performance
		<where>
			<if test='searchType.equals("companyId")'>
			upper(member_id) like '%'||upper(#{ keyword })||'%'
			</if>
			<if test='searchType.equals("perTitle")'>
			upper(per_title) like '%'||upper(#{ keyword })||'%'
			</if>
		</where>
	</select>	
	
	<select id="allPerformanceList" resultMap="performanceMap">
		select 
			*
		from(
        	select
                rownum as rnum,
                P.*
        	from 
                (select
                       *
                from
                    performance
                where 
                	per_display='N'
                order by per_display
                )P
		)
		where rnum between #{ start } and #{ end } 
	</select>
	
	<select id="totalAllPerformanceList" resultType="_int">
		select 
			count(*)
		from
			performance
		where per_display = 'N'
	</select>
	<select id="recommendList" resultMap="performanceMap">
		select 
			*
		from
			performance
		where per_display = 'Y'
	</select>		
	
	<select id="selectDate" resultMap="perSchedule">
		select
        	*
		from
        	schedule
		where
        	per_no = #{ perNo }
    		and extract(year from sch_date_time) = extract(year from to_timestamp(#{ newFormatDate }, 'yyyy-MM-dd HH24:mi:ss'))
    		and extract(month from sch_date_time) = extract(month from to_timestamp(#{ newFormatDate }, 'yyyy-MM-dd HH24:mi:ss'))
    		and extract(day from sch_date_time) = extract(day from to_timestamp(#{ newFormatDate }, 'yyyy-MM-dd HH24:mi:ss'))
	</select>
	
	<delete id="perDelete">
		delete from 
			performance
		where 
			per_no = #{ perNo }
	</delete>
	
	<select id="selectPerRank" resultMap="performanceMap">
		select 
		        * 
		from
		        (select
		                rownum as rnum,
		                P.*
		        from
		                (select 
		                        *
		                from
		                        performance P
		                    <choose>
		                    	<when test="code2 != null">
		                    		where category_code in (#{ code1 }, #{ code2 })
		                    	</when>
		                    	<otherwise>
		                    		where category_code = #{ code1 }
		                    	</otherwise>
		                    </choose>
		                order by sale_cnt desc) P) P
	</select>
	
	<select id="selectPickList" resultMap="performanceMap">
		select 
			* 
		from 
			performance 
		where per_display='Y'
	</select>
	
	<select id="commentPerList" resultMap="commentPerListMap">
		select
			*
		from
			comment_per_list_view
		where
			board_comment_writer = #{ boardCommentWriter }
		order by
			board_comment_date desc 
	</select>
		<select id="selectScheduleHall" resultType="_int">
		select theater_no
		from schedule
		where sch_no = #{schNo}
	</select>
	<select id="selectOneTheater" resultMap="performanceHallMap">
		select *
		from theater
		where theater_no = #{theaterNo}
	</select>
	
	<select id="allPerJoinList" resultMap="perJoinMap">
		select
			*
		from
			performance_join_view
 		<where>
 			admin_approval = 'Y'
			<if test='locationCode != null'>
				and location_code = #{ locationCode }
			</if>
			<if test='categoryArr != null'>
				and category_code in
				<foreach collection="categoryArr" item="arr" open="(" close=")" separator=",">
					#{ arr }
				</foreach>
			</if>
		</where> 
	</select>
	<select id="selectSeatList" resultMap="seatMap">
	select
		*
	from seat
	where theater_no = #{ theaterNo }
	</select>
	<insert id="addSelect">
	insert into
		selected
	values(
		#{ seatNo },
		#{ memberId},
		#{ schNo },
		default,
		default
	)
	</insert>
	<delete id="removeSelect">
	delete from 
		selected
	where 
		seat_no = #{ seatNo }
		and member_id = #{ memberId }
		and sch_no = #{ schNo }
	</delete>
	
	<select id="todayPerList" resultMap="perJoinMap">
		select
			*
		from
			performance_join_view
 		where to_char(per_end_date, 'YYMMDD') = to_char(sysdate, 'YYMMDD')
	</select>	
	
	<select id="openNewsPerList" resultMap="performanceMap">
        select 
			*
		from(
        	select
                rownum as rnum,
                P.*
        	from 
                (select
                       *
                from
                    performance
                where 
                	admin_approval = 'Y'
                and 
                    trunc(cast(reservation_start_date as date)) &lt;= trunc(sysdate)
                order by reservation_start_date desc
                )P
		)
		where rnum between #{ start } and #{ end } 
	</select>
	
	<select id="totalOpenNewsPerList" resultType="_int">
		select 
			count(*)
		from
			performance
		where admin_approval = 'Y'
       <!--  order by per_register_date desc -->
	</select> 
	<select id="selectSelectedList" resultMap="selectedMap">
		select *
		from selected
		where sch_no = #{ schNo }
	</select>
	<select id="seatPrice" resultType="_int">
 	select seat_price
 	from seat
 	where seat_no = #{ i }
	</select>
	<select id="seatLength" resultType="_int">
	select count(*)
	from selected
	where sch_no = #{ schNo }
	</select>
	<select id="selectOneSchedule" resultType="_int">
	select per_no
	from schedule
	where sch_no = #{ schNo }
	</select>
	<insert id="insertPay">
	insert into pay values(#{ orderNo },#{ schNo },#{ totPrice },#{ seatCount },#{ payOption },default,#{ memberId },default,default )
	</insert>
	<insert id="insertTicket">
	insert into ticket values(ticket_sequence.nextval,#{ ticPrice },#{ schNo },#{ seatNo },#{ memberId},#{ orderNo },#{ seatName })
	</insert>
	<update id="updateSelected">
	update selected set pay_yn='Y' where sch_no=#{ schNo } and seat_no=#{ seatNo }
	</update>
	<select id="selectOneDate" resultType="date">
		select sch_date_time-1
		from schedule
		where sch_no = #{ schNo }
	</select>
	<select id="selectOnePay" resultMap="payMap">
	select * from pay where order_no = #{ orderNum }
	</select>
	
	<delete id="selectedDelete">
		delete from 
			selected
		where 
			temp_time = #{ tempTime } 
	</delete>
	
	<select id="selectOpenList" resultMap="performanceMap">
        select
			*
		from
			performance
        where 
        	trunc(cast(reservation_start_date as date)) >= trunc(sysdate)
		order by 
			reservation_start_date
	</select>
	<select id="selectScheduleNo" resultType="_int">
	select sch_no
	from schedule
	where per_no = #{ perNo }
	</select>
	<update id="updateSaleCount">
	update performance set sale_cnt = sale_cnt+1 where per_no = #{ perNo }
	</update>
	
	<select id="selectOneTicket" resultMap="ticketMap">
		select
			*
			<!-- order_no -->
		from
			ticket
		where tic_no = #{ ticNo }
		
	</select>	
	
	<update id="updatePayCount">
	update pay set seat_count=seat_count-1 where order_no = #{ orderNo }
	</update>
	
	<update id="updateSelectedPayYn">
		update selected set pay_yn = 'N' 
		where 
			member_id = #{ memberId }
			and
			sch_no = #{ schNo }
			and
			seat_no = #{ seatNo }
			
	</update>
	
	<resultMap type="performance" id="performanceMap">
	</resultMap>
	<resultMap type="performanceHall" id="performanceHallMap">
	</resultMap>
	<resultMap type="wishList" id="wishListMap">
	</resultMap>		
	<resultMap type="myWishList" id="myWishListMap">
	</resultMap>		
	<resultMap type="myRecentlyPerList" id="MyRecentlyPerListMap">
	</resultMap>		
	<resultMap type="schedule" id="perSchedule">
	</resultMap>
	<resultMap type="perJoin" id="perJoinMap">
	</resultMap>
	<resultMap type="commentPerList" id="commentPerListMap">
	</resultMap>
	<resultMap type="seat" id="seatMap">
	</resultMap>
	<resultMap type="selected" id="selectedMap">
	</resultMap>
	<resultMap type="pay" id="payMap">
	</resultMap>
	<resultMap type="ticket" id="ticketMap">
	</resultMap>
	
</mapper>